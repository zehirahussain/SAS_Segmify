import pandas as pd
import matplotlib.pyplot as plt
import os
import mysql.connector
from pptx import Presentation
from pptx.util import Inches
import json

# Database connection function
def get_db_connection():
    return mysql.connector.connect(
        host="localhost",
        user="root",
        password="",
        database="loginandanalysis"
    )

# Function to save image details to the database
def save_or_update_image_in_db(user_id, image_path, image_type):
    conn = get_db_connection()
    cursor = conn.cursor()

    cursor.execute(
        "SELECT id FROM user_images WHERE user_id = %s AND image_path = %s AND image_type = %s",
        (user_id, image_path, image_type)
    )
    result = cursor.fetchone()

    if result:
        cursor.execute(
            "UPDATE user_images SET image_path = %s WHERE id = %s",
            (image_path, result[0])
        )
    else:
        cursor.execute(
            "INSERT INTO user_images (user_id, image_path, image_type) VALUES (%s, %s, %s)",
            (user_id, image_path, image_type)
        )

    conn.commit()
    cursor.close()
    conn.close()

# Function to update PowerPoint presentation with new image
def update_presentation(user_id, image_path):
    conn = get_db_connection()
    cursor = conn.cursor()

    # Fetch or create the presentation for the user
    cursor.execute("SELECT presentation_path FROM user_presentations WHERE user_id = %s", (user_id,))
    result = cursor.fetchone()

    if result:
        ppt_path = result[0]
    else:
        ppt_path = f'static/presentations/user{user_id}_presentation.pptx'
        prs = Presentation()
        prs.save(ppt_path)
        cursor.execute(
            "INSERT INTO user_presentations (user_id, presentation_path) VALUES (%s, %s)",
            (user_id, ppt_path)
        )
        conn.commit()

    prs = Presentation(ppt_path)
    slide = prs.slides.add_slide(prs.slide_layouts[5])
    slide.shapes.add_picture(image_path, Inches(1), Inches(1), width=Inches(8), height=Inches(5.5))
    
    prs.save(ppt_path)

    cursor.close()
    conn.close()

# Load the dataset
file_path = 'review/Review_analysis.xlsx'
df = pd.read_excel(file_path)

# Ensure static/images/ exists
output_dir = 'static/images/'
if not os.path.exists(output_dir):
    os.makedirs(output_dir)

# Semantic analysis storage
semantic_analysis = {
    'revenue_by_item_currency': '',
    'quantity_billed_by_item': '',
    'revenue_quantity_by_bu': '',
    'top_customers_by_revenue': '',
    'revenue_trend_over_months': ''
}

# 1. Revenue by Item Name and Currency
revenue_item_currency = df.groupby(['Item Name', 'Currency'])['Revenue Billed'].sum().unstack()
ax = revenue_item_currency.plot(kind='bar', stacked=True, figsize=(20, 12))
plt.title('Revenue by Item Name and Currency')
plt.ylabel('Revenue Billed')
plt.xticks(rotation=90)  # Rotate x-axis labels
plt.tight_layout()  # Adjust layout to prevent clipping
plt.savefig(output_dir + 'revenue_by_item_currency.png', bbox_inches='tight', dpi=50)
plt.close()

# Find top items and currencies with significant revenue
item_totals = revenue_item_currency.sum(axis=1)
top_items = item_totals.nlargest(2).index

top_currencies = {}
for item in top_items:
    if item in revenue_item_currency.index:
        top_currencies[item] = revenue_item_currency.loc[item].idxmax()

top_item_x = top_items[0]
top_item_y = top_items[1]
top_currency_x = top_currencies.get(top_item_x, 'Unknown')
top_currency_y = top_currencies.get(top_item_y, 'Unknown')

# Add semantic analysis for revenue by item name and currency
semantic_analysis['revenue_by_item_currency'] = f"Significant revenue contributions are observed for items '{top_item_x}' and '{top_item_y}', primarily in currencies '{top_currency_x}' and '{top_currency_y}'."

# 3. Quantity Billed by Item Name
quantity_item = df.groupby('Item Name')['Quantity Billed'].sum()
ax = quantity_item.plot(kind='bar', figsize=(10, 6))
plt.title('Quantity Billed by Item Name')
plt.ylabel('Quantity Billed')
plt.xticks(rotation=90)  # Rotate x-axis labels
plt.tight_layout()  # Adjust layout to prevent clipping
plt.savefig(output_dir + 'quantity_billed_by_item.png', bbox_inches='tight', dpi=100)
plt.close()

# Add semantic analysis for quantity billed by item name
top_item = quantity_item.idxmax()
top_quantity = quantity_item.max()
semantic_analysis['quantity_billed_by_item'] = f"Item '{top_item}' has the highest quantity billed with a total of {top_quantity} units."

# 4. Revenue and Quantity by Business Unit (BU)
bu_revenue = df.groupby('BU')['Revenue Billed'].sum()
bu_quantity = df.groupby('BU')['Quantity Billed'].sum()

fig, ax1 = plt.subplots(figsize=(12, 8))

ax1.set_xlabel('Business Unit')
ax1.set_ylabel('Revenue Billed', color='tab:blue')
ax1.bar(bu_revenue.index, bu_revenue, color='tab:blue', label='Revenue Billed')
ax1.tick_params(axis='y', labelcolor='tab:blue')
ax1.set_xticklabels(bu_revenue.index, rotation=90)  # Rotate x-axis labels

ax2 = ax1.twinx()
ax2.set_ylabel('Quantity Billed', color='tab:orange')
ax2.plot(bu_quantity.index, bu_quantity, color='tab:orange', label='Quantity Billed', marker='o')
ax2.tick_params(axis='y', labelcolor='tab:orange')

plt.title('Revenue and Quantity by Business Unit')
plt.tight_layout()  # Adjust layout to prevent clipping
plt.savefig(output_dir + 'revenue_quantity_by_bu.png', bbox_inches='tight', dpi=80)
plt.close()

# Find top business units for revenue and quantity
top_bu_revenue = bu_revenue.idxmax()
top_bu_quantity = bu_quantity.idxmax()

# Add semantic analysis for revenue and quantity by business unit
semantic_analysis['revenue_quantity_by_bu'] = f"The unit '{top_bu_revenue}' generated the highest revenue, while '{top_bu_quantity}' had the highest quantity billed."

# 5. Top Customers by Revenue
top_customers = df.groupby('Customer Name')['Revenue Billed'].sum().nlargest(10)
ax = top_customers.plot(kind='bar', figsize=(10, 6))
plt.title('Top 10 Customers by Revenue')
plt.ylabel('Revenue Billed')
plt.xticks(rotation=90)  # Rotate x-axis labels
plt.tight_layout()  # Adjust layout to prevent clipping
plt.savefig(output_dir + 'top_customers_by_revenue.png', bbox_inches='tight', dpi=100)
plt.close()

# Find top customer by revenue
top_customer = top_customers.idxmax()
top_customer_revenue = top_customers.max()
semantic_analysis['top_customers_by_revenue'] = f"'{top_customer}' is the top customer with a total revenue of {top_customer_revenue:.2f}."

# 7. Revenue Trend Over Recognized Months
revenue_trend = df.groupby('Recog. Months')['Revenue Billed'].sum()
ax = revenue_trend.plot(kind='line', figsize=(12, 8))
plt.title('Revenue Trend Over Recognized Months')
plt.ylabel('Revenue Billed')
plt.xticks(rotation=90)  # Rotate x-axis labels
plt.tight_layout()  # Adjust layout to prevent clipping
plt.savefig(output_dir + 'revenue_trend_over_months.png', bbox_inches='tight', dpi=80)
plt.close()

# Add semantic analysis for revenue trend over recognized months
semantic_analysis['revenue_trend_over_months'] = "An increasing trend is observed in recent months, indicating growth."

# Save semantic analysis to a JSON file
with open(output_dir + 'semantic_analysis.json', 'w') as f:
    json.dump(semantic_analysis, f, indent=4)

print("Review analysis images and semantic analysis have been saved.")


# Function to append analysis results to the presentation
def append_analysis_to_presentation(user_id, semantic_analysis):
    conn = get_db_connection()
    cursor = conn.cursor()

    # Fetch the presentation path
    cursor.execute("SELECT presentation_path FROM user_presentations WHERE user_id = %s", (user_id,))
    result = cursor.fetchone()

    if result:
        ppt_path = result[0]
    else:
        print("Presentation not found.")
        cursor.close()
        conn.close()
        return

    prs = Presentation(ppt_path)
    
    # Add analysis text on a new slide
    analysis_slide = prs.slides.add_slide(prs.slide_layouts[5])
    textbox = analysis_slide.shapes.add_textbox(Inches(1), Inches(1), Inches(8), Inches(5.5))
    text_frame = textbox.text_frame
    p = text_frame.add_paragraph()
    p.text = semantic_analysis
    p.font.size = Inches(0.2)  # Adjust font size as needed

    prs.save(ppt_path)
    print(f"Updated presentation with analysis at {ppt_path}")

    cursor.close()
    conn.close()

# Append the analysis results to the presentation
append_analysis_to_presentation(user_id, semantic_analysis)




reviewanalysis.h

<!DOCTYPE html>
<html lang="en">

<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Dashboard - review analysis</title>
  <link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css">
  <style>
    #sidebar {
        background-color: #202020;
        height: 100vh;
        width: 250px;
        padding: 20px;
        position: fixed;
        left: 0;
        top: 0;
        overflow-y: auto;
    }

    .sidebar-button {
        background-color: #005288;
        border: none;
        color: white;
        padding: 3px 30px;
        text-align: center;
        text-decoration: none;
        display: block;
        font-size: 12.5px;
        margin: -2.5px 0;
        border-radius: 10px;
        box-shadow: 0 4px 8px 0 rgba(0, 0, 0, 0.2);
        transition: all 0.3s;
        flex: 1;
    }

    .dash {
        color: white;
        padding: 10px 25px;
        font-weight: bold;
        display: block;
        font-size: 16px;
        margin: 10px 10;
    }

    .sidebar-button:hover {
        background-color: #05424b;
        box-shadow: 0 6px 12px 0 rgba(0, 0, 0, 0.3);
        overflow: hidden;
    }

    .nav-link {
        border-radius: 5px;
        padding: 8px 16px;
        margin: 5px 0;
        display: inline-flex;
    }

    .footer {
        color: white;
        font-size: 12px;
        background-color: #202020;
        text-align: center;
        padding: 10px;
        position: fixed;
        bottom: 0;
        left: 0;
        width: 250px;
    }

    .content {
        margin-left: 250px;
        padding: 20px;
        background-color: #131b2f;
        height: 530vh;
        color: white;
    }

    hr.rounded {
        border-top: 4px solid #4d5357;
        border-radius: 5px;
    }

    hr.solid {
        border-top: 3px solid #1e3673;
    }

    .dropbtn {
        background-color: #202020;
        color: white;
        padding: 0px;
        font-size: 20px;
        border: none;
        float: right;
        text-align: right;
    }

    .dropup {
        position: relative;
        display: inline-block;
    }

    .dropup-content {
        display: none;
        position: absolute;
        background-color: #4d5357;
        min-width: 160px;
        bottom: 35px;
        z-index: 1;
        border-radius: 5px;
    }

    .dropup-content a {
        color: white;
        padding: 12px 16px;
        text-decoration: none;
        display: block;
    }

    .dropup-content a:hover {
        background-color: #62696D;
    }

    .dropup:hover .dropup-content {
        display: block;
    }

    .dropup:hover .dropbtn {
        background-color: #4d5357;
    }

    #graph-container {
        width: 950px;
        height: 520px;
        margin: 0 auto;
        border: 1px solid #131b2f;
    }

    .image-container img {
        margin: 10px 0;
        display: block;
    }
    .username {
        font-size: 20px; /* Adjust font size as needed */
        color: #d9e0e6; /* Adjust text color */
        font-weight: bold; /* Adjust font weight */
    }
</style>
</head>

<body>
  <div id="sidebar">
    <li class="dash"> &#128202; Dashboard</li>
    <nav class="nav flex-column">
      <a class="nav-link" href="segmentationandrevenue.html"><button class="sidebar-button">Segmentation & Revenue</button></a>
      <a class="nav-link" href="#"><button class="sidebar-button">Review Analysis</button></a>
      <a class="nav-link" href="presentation.html"><button class="sidebar-button">Presentation</button></a>
      <a class="nav-link" href="reportportal1.html" id="generateReportBtn"><button class="sidebar-button">Report</button></a>
      <a class="nav-link" href="decisionn.html"><button class="sidebar-button">Back</button></a>
    </nav>
    <footer class="footer flex-column">
      <a class="nav-link" href="#"><button class="sidebar-button">Import File</button></a>

      <hr class="rounded">

      <div class="dropup">
        <button onclick="toggleDropup()" class="dropbtn" style="font-weight: bold;">⇧</button>
        <div id="myDropup" class="dropup-content">
          <a href="settings.php">⚙️ Settings</a>
          <a href="logout.php">🚪 Log Out</a>
        </div>
    </div>
    

    <span id="username" class="username"></span>
    <span>🔔</span>
    </footer>
  </div>
  <div class="content">
    <main role="main">
        <div class="text-center mt-5">
            <h2>Review Analysis Results</h2>
                    </div>
        <hr class="solid">
        <div id="graph-container" class="image-container">
        <h2>Revenue by Item Name and Currency</h2>
        
        <div class="graph">
            <img src="static/images/revenue_by_item_currency.png" alt="Revenue by Item and Currency">
        </div>
        <p class="analysis" id="revenue_by_item_currency">Loading...</p>

        <h2>Quantity Billed by Item Name</h2>
        <div class="graph">
            <img src="static/images/quantity_billed_by_item.png" alt="Quantity Billed by Item Name">
        </div>
        <p class="analysis" id="quantity_billed_by_item">Loading...</p>

        <h2>Revenue and Quantity by Business Unit</h2>
        <div class="graph">
            <img src="static/images/revenue_quantity_by_bu.png" alt="Revenue and Quantity by Business Unit">
        </div>
        <p class="analysis" id="revenue_quantity_by_bu">Loading...</p>

        <h2>Top 10 Customers by Revenue</h2>
        <div class="graph">
            <img src="static/images/top_customers_by_revenue.png" alt="Top 10 Customers by Revenue">
        </div>
        <p class="analysis" id="top_customers_by_revenue">Loading...</p>

        <h2>Revenue Trend Over Recognized Months</h2>
        <div class="graph">
            <img src="static/images/revenue_trend_over_months.png" alt="Revenue Trend Over Recognized Months">
        </div>
        <p class="analysis" id="revenue_trend_over_months">Loading...</p>
    </div>
</div></div>
</main>
</div>

  <script src="https://code.jquery.com/jquery-3.5.1.slim.min.js"></script>
  <script src="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/js/bootstrap.bundle.min.js"></script>
 
  <script>
    // Function to run the Python script
    function runPythonScript() {
      fetch('run_review_analysis.php')
        .then(response => response.json())
        .then(data => {
          if (data.status === 'success') {
            console.log('Python script executed successfully.');
            // Optionally, you could update the page content here if needed
          } else {
            console.error('Error:', data.message);
          }
        })
        .catch(error => console.error('Error:', error));
    }

    // Run the Python script when the page loads
    window.onload = runPythonScript;

    // Your existing scripts
  </script>

  <script>
    document.querySelectorAll('.nav-link').forEach(link => {
      link.addEventListener('click', function (event) {
        event.preventDefault(); 
        const href = this.getAttribute('href');
        window.location.href = href;
      });
    });
  </script>
  

  <script>
 
  fetch('session_check.php')
            .then(response => response.text())
            .then(data => {
                if (data === "NA") {
                    window.location.href = 'loginnnn.html'; // Redirect to login page if NA
                } else {
                    document.getElementById('username').innerText = data;
                }
            })
            .catch(error => console.error('Error:', error));
    document.getElementById('generateReportBtn').addEventListener('click', function () {
      fetch('generate_report.php')
        .then(response => response.text())
        .then(data => {
          alert(data);  // Show the result of the report generation
          // Redirect to reportportal1.php after the report is generated
          window.location.href = 'reportportal1.php';
        })
        .catch(error => {
          alert('Error: ' + error.message);
        });
    });
 
  </script>


  <script>
    /* for dropup */
function toggleDropup() {
    var dropupContent = document.getElementById("myDropup");
    dropupContent.classList.toggle("show");
}

window.onclick = function(event) {
    if (!event.target.matches('.dropbtn')) {
        var dropups = document.getElementsByClassName("dropup-content");
        for (var i = 0; i < dropups.length; i++) {
            var openDropup = dropups[i];
            if (openDropup.classList.contains('show')) {
                openDropup.classList.remove('show');
            }
        }
    }
}

fetch('static/images/semantic_analysis.json')
            .then(response => response.json())
            .then(data => {
                document.getElementById('revenue_by_item_currency').innerText = data.revenue_by_item_currency;
                document.getElementById('quantity_billed_by_item').innerText = data.quantity_billed_by_item;
                document.getElementById('revenue_quantity_by_bu').innerText = data.revenue_quantity_by_bu;
                document.getElementById('top_customers_by_revenue').innerText = data.top_customers_by_revenue;
                document.getElementById('revenue_trend_over_months').innerText = data.revenue_trend_over_months;
            })
            .catch(error => console.error('Error fetching semantic analysis:', error));
    </script>
</script>
</body>

</html>
